package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	s := fmt.Sprintf(strings.TrimSpace(`
// Do not edit, generated by github.com/clls-dev/clls/pkg/lspsrv/gen

package %s

import (
	"encoding/json"

	"%s"
	"github.com/pkg/errors"
)
`)+"\n\n", pkgName, lspPkg)

	s += "type LanguageServer interface {\n"
	for _, d := range defs {
		s += fmt.Sprintf("	%s(%s) %s\n", d.name, d.fullReq(), d.fullRet())
	}
	s += "}\n\n"

	s += "type UnimplementedLanguageServer struct {}\nvar _ LanguageServer = (*UnimplementedLanguageServer)(nil)\n"
	for _, d := range defs {
		retPrefix := ""
		if d.responseType != "" {
			retPrefix = "nil, "
		}
		s += fmt.Sprintf(`func (s *UnimplementedLanguageServer) %s(%s) %s {
	return %sErrNotImplemented
}

`, d.name, d.fullReq(), d.fullRet(), retPrefix)
	}

	s += strings.TrimSpace(`
func LanguageServerHandle(s LanguageServer, method string, payloadBytes []byte) (interface{}, error) {
	switch method {
`) + "\n"
	for _, d := range defs {
		retPrefix := ""
		if d.responseType == "" {
			retPrefix = "nil, "
		}
		if d.requestType == "" {
			s += fmt.Sprintf(`case "%s":
				return %ss.%s()
			`, d.id, retPrefix, d.name) + "\n"
		} else {
			s += fmt.Sprintf(`case "%s":
			var payload %s
			if err := json.Unmarshal(payloadBytes, &payload); err != nil {
				return nil, errors.Wrap(err, "unmarshal payload")
			}
			return %ss.%s(&payload)
		`, d.id, d.requestType, retPrefix, d.name) + "\n"
		}
	}
	s += strings.TrimSpace(`
	}
	return nil, ErrUnknownMethod
}
`) + "\n\n"

	if _, err := os.Stdout.Write([]byte(s)); err != nil {
		panic(err)
	}
}

func uncap(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToLower(s[0:1]) + s[1:]
}
